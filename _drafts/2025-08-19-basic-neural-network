---
layout: post
title: How to build a neural network using PyTorch
subtitle: A quick tutorial
tags: [neural-network]
---

*August 19, 2025*

Starting my second Kaggle competition, I noticed the tutorial provided by the competition hosts uses Pytorch to create 
Long Short Term Memory (LSTM) and Graph Neural Network (GNN) models. Pytorch is an open-source framework that is used to 
build and train deep learning models. (Alternative frameworks include TensorFlow or Keras). A neural network is basically a huge
function that is loosely built on the concept of neurons in a brain. Each layer of neurons passes on information to the next
layer of neurons. The neurons in each layer modify that information they receive based on parameters (specifically, weights and
biases). Then, the neural network outputs a prediction. 

I‚Äôve never programmed a basic neural network, but this quick exercise will give me a better understanding 
of how they work before trying to apply LSTMs and GNNs to a real world problem. It will also give me more familiarity
with the PyTorch framework. 

I watched the video [But what is a neural network?](https://www.youtube.com/watch?v=aircAruvnKk&t=2s) from 3Blue1Brown 
to get a more granular understanding of how neural networks work. Then, I watched 
[Pytorch in 100 seconds](https://www.youtube.com/watch?v=ORMx45xqWkA) by Fireship, which explained Pytorch‚Äôs uses and gave
a very quick explanation of how to build a neural network. Perfect combo!

You can follow along by watching both videos first, or just read through my explanation below. My Colab notebook is 
[HERE](https://colab.research.google.com/drive/13p1FF4Ih33jfyCi0UOrVjyIIXxwuTbDN?usp=sharing).

**Objective**: Create a basic neural network that takes images from the famous [MNIST](https://en.wikipedia.org/wiki/MNIST_database)
dataset and predicts the handwritten number present in each image.

## 1. Import the necessary libraries

* ‚ÄòDataLoader‚Äô handles batching for efficiency and memory management.
* ‚ÄòDatasets‚Äô gives access to built-in datasets like MNIST

![Import libraries code](assets/nn-imports.jpg)

## 2. Explore the dataset

* The tensor is the fundamental data structure in Pytorch. They are analogous to arrays in numpy. Before moving forward 
with PyTorch commands, convert the given dataset from whatever form it‚Äôs currently in into a tensor.
* There are 60,000 samples in the dataset. 
* Determine the format of data in the dataset. 
  üîç Using the ‚Äòtype()‚Äô command tells me that the first item in the dataset is a tuple. Most Pytorch datasets have data
  stored in a tuple with the pattern ‚Äò(data, target)‚Äô. I see that it‚Äôs a tuple of length 2.
  üîç The ‚Äò.shape‚Äô attribute tells me the dimensions of the data. If the data is in the form ‚Äò(data, target)‚Äô and I know I'm
  looking for image data, I can expect the first value in the tuple to have multiple dimensions. I see that the shape of the
  first value in the tuple is [1, 28, 28]. PyTorch tensor format represents images as 
  [number of channels, image height in pixels, image width in pixels]. That looks like image data! I originally printed the
  value of the first tuple, but it was a very, very long tensor, so I only included the shape in the final code. 
  üîç However, I did print the second tuple value. The target is the handwritten number represented by the image.





